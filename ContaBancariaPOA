// Classe para contas bancárias

class ContaBancaria {
    constructor(saldo) {
        this.saldo = saldo;
    }

    // Método para saque

sacar(valor) {
    if (this.saldo < valor) {
        throw new Error("Saldo insuficiente");
    }

    this.saldo -= valor;
    console.log(`Saque de ${valor} efetuado com sucesso`);
    }

}

// Classe para conta corrente

class ContaCorrente extends ContaBancaria {}

// Classe para conta salário

class ContaSalario extends ContaBancaria {}

// Classe para conta poupança

class ContaPoupanca extends ContaBancaria {}

// Classse para conta investimento

class ContaInvestimento extends ContaBancaria {}

// Aspectos para logs de erros

const loErros = {
    // Ponto de corte para o método sacar em todas as contas
    pointcut: /^Conta.*\.sacar$/,

    // Advice para inteceptar e registrar erros
    advice: function(target, methodNome, args, result, error) {
        if (error) {
            console.error(`Erro ao realizar saquem em ${target.constructor.name}: ${error.message}`);
        }        
    }
};

// Inplementação de POA usando a biblioteca CrosscutJS
const crosscut = require('crosscut');
const contas  = [new ContaCorrente(1000), new ContaSalario(500), new ContaPoupanca(2000), new ContaInvestimento(10000)];
const contasPOA = crosscut.aop(contas, [logErros]);

// Exemplo de uso das contas bancárias

try {
    contasPOA[0].sacar(500);
    contasPOA[1].sacar(1000);
    contasPOA[2].sacar(2000);
    contasPOA[3].sacar(20000);
    } catch (error) {
        console.error(error.message);
    }
